def find_max():
    numbers=[]
    max_number=0
    limit=0
    j=5
    while limit < 5:
        numbers.append(int(input(f"We need {j} numbers to compare: ")))
        limit += 1
        j -=1
    
    
    for number in numbers:
        if number > max_number:
            max_number = number
    print(f"Max number = {max_number}")

#########################################################################
import random
class Dice:
    def roll(self):
        first = random.randint(1,6)
        second = random.randint(1,6)
        return first,second
            

dice = Dice()
print(dice.roll())
##############################Kata valid_parentheses###########################################
#Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it's invalid.

#Examples
#"()"              =>  true
#")(()))"          =>  false
#"("               =>  false
#"(())((()())())"  =>  true
#Constraints
#0 <= input.length <= 100

#Along with opening (() and closing ()) parenthesis, input may contain any valid ASCII characters. Furthermore, the input string may be empty and/or not contain any parentheses at all. Do not treat other forms of brackets as parentheses (e.g. [], {}, <>).

#ALGORITHMS VALIDATION UTILITIES

def valid_parentheses(string):
    para_open=0
    para_close=0
    only_para=[]
    openpara="("
    closepara=")"

    for charac in string:
        if charac == "(":
            para_open +=1
            only_para.append(charac)
        elif charac == ")":
            para_close +=1
            only_para.append(charac)
	
    if len(only_para) == 0:
        return True
    elif para_open == para_close and only_para[-1] == ")" :
        return True
    else:
        return False

##############################Kata Extract the domain name from a URL###########################################

#Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:

#domain_name("http://github.com/carbonfive/raygun") == "github" 
#domain_name("http://www.zombie-bites.com") == "zombie-bites"
#domain_name("https://www.cnet.com") == "cnet"		
		
def domain_name(url):
    s1=url.split('/')
    url_copy=s1.copy()
    
    #clean_list from all "www" or "https:" or "http:" or ""
    for i in s1:
        if i == "www":
            url_copy.remove(i)
        elif i == "https:":
            url_copy.remove(i)
        elif i == "http:":
            url_copy.remove(i)
        elif i == "":
            url_copy.remove(i)
    
    s2=url_copy[0].split('.')
    #if "www" in s2 return s2[1] else s2[0]
    if "www" in s2:
        return s2[1]
    else:
        return s2[0]
    
#domain_name("http://google.com")
domain_name("https://tkl6xawh4ecpowqcrkx5o2znhxvji.org/index.php")
#domain_name("http://www.aa6a73qzea39m4201eoq.edu")
#domain_name("q5e3ypbs49j9zckevlp.com/users")
